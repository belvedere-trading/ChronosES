syntax='proto3';

package BT.Chronos.Proto;

message EventProto {
  string type = 1;
  int64 version = 2;
  int64 logicVersion = 3;
  bytes proto = 4;
  int64 receivedTimestamp = 5;
  int64 processedTimestamp = 6;
}

message AggregateProto {
  int64 aggregateId = 1;
  int64 version = 2;
  bytes proto = 3;
}

message ChronosRequest {
  int64 aggregateId = 1;
  string eventType = 2;
  bytes eventProto = 3;
  bytes senderId = 4;
}

message ChronosRequestWithTag {
  ChronosRequest request = 1;
  string tag = 2;
}

message ChronosTransactionRequest {
  repeated ChronosRequestWithTag requests = 1;
}

message ChronosPair {
   string key = 1;
   string value = 2;
}

message ChronosResponse {
  enum ResponseCode {
    SUCCESS = 0;
    FAILURE = 1;
  }

  int64 requestId = 1;
  ResponseCode responseCode = 2;
  string responseMessage = 3;
  EventProto eventProto = 4;
  AggregateProto aggregateProto = 5;
  bytes senderId = 6;
  repeated ChronosPair additionalInformation = 7;
}

message AggregateLogic {
  string protoFileContents = 1;
  string pythonFileContents = 2;
}

message ChronosRegistrationRequest {
  string aggregateName = 1;
  AggregateLogic aggregateLogic = 2;
}

message IndexedAttribute {
  string attributeName = 1;
  bool isCaseInsensitive = 2;
}

message ChronosRegistrationResponse {
  enum ResponseCode {
    SUCCESS = 0;
    FAILURE = 1;
  }

  ResponseCode responseCode = 1;
  string responseMessage = 2;
  repeated IndexedAttribute indexedAttributes = 3;
}

message ChronosManagementNotification {
  enum NotificationType {
    REGISTERED = 0;
    UNREGISTERED = 1;
    INDEX_DIVERGED = 2;
  }

  NotificationType notificationType = 1;
  int64 aggregateId = 2; // Only set for INDEX_DIVERGED
  repeated IndexedAttribute indexedAttributes = 3; // Only set for REGISTERED
}

message ChronosQueryAllRequest {
  string aggregateName = 1;
}

message ChronosQueryByIdRequest {
  string aggregateName = 1;
  int64 aggregateId = 2;
}

message ChronosQueryByIndexRequest {
  string aggregateName = 1;
  repeated string indexKeys = 2;
}

message ChronosQueryByTagRequest {
  string aggregateName = 1;
  string tag = 2;
  int64 aggregateId = 3;
}

message ChronosQueryResponse {
  enum ResponseCode {
    SUCCESS = 0;
    TAG_NOT_FOUND = 1;
  }

  repeated AggregateProto aggregates = 1;
  ResponseCode responseCode = 2;
}
